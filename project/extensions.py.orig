from celery import Celery
from flask_sqlalchemy import SQLAlchemy
from kombu import Queue

db = SQLAlchemy()


class MyCelery:
    def __init__(self, app=None):
        self.celery = Celery(__name__)
        if app is not None:
            self.init_app(app)

    def init_app(self, app):
        self.celery.conf.update(app.config)

        # QUEUES
        self.celery.conf.task_queues = (
            Queue('default', "default", routing_key='default'),
            Queue('add_user', routing_key='add'),
            Queue('add_user_1', routing_key='add_user'),
        )

        # TASKS
        self.celery.conf.task_routes = {
            'project.tasks.count': {'queue': 'add', 'routing_key': 'add'},
            'another_project.tasks.add_user': {'queue': 'add_user', 'routing_key': 'add_user'},
        },

        # DEFAULTS
        self.celery.conf.task_default_exchange = 'default'
        self.celery.conf.task_default_routing_key = 'default'
        self.celery.conf.task_default_exchange_type = 'direct'
        self.celery.conf.task_default_queue = 'default'
        self.celery.conf.update(worker_pool='solo')
        self.celery.conf.worker_log_level = 'DEBUG'
        # WORKERS
        self.celery.conf.worker_concurrency = 5

        # STORAGES
        self.celery.conf.result_backend = app.config["RESULT_BACKEND"]
        self.celery.conf.broker_url = app.config["BROKER_URL"]

        class ContextTask(self.celery.Task):
            def __call__(self, *args, **kwargs):
                with app.app_context():
                    return self.run(*args, **kwargs)

        self.celery.Task = ContextTask


c = MyCelery()
